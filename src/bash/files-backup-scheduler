#!/bin/bash

# Initialize variables with default values
CONFIG_FILE=/etc/files-backup/_scheduler.cfg

# Usage function
usage() {
  cat <<EOF
Usage: $(basename "$0") [-r|--retention <policy>] [-c|--config <file>]
       $(basename "$0") -h|--help
  -r, --retention <policy>   Backup retention policy (daily, weekly, monthly, yearly)
  -c, --config <file>       Configuration file
  -h, --help                Display this help and exit
EOF
}

# Parse options
while [[ $# -gt 0 ]]; do
  case $1 in
    -r|--retention)
      RETENTION=$2
      shift 2
      ;;
    -c|--config)
      CONFIG_FILE=$2
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage
      exit 1
      ;;
  esac
done

# Validate retention policy
case $RETENTION in
  daily|weekly|monthly|yearly)
    ;;
  *)
    echo "Invalid retention policy: $RETENTION" >&2
    usage
    exit 1
    ;;
esac

# Validate configuration file
if [[ ! -f $CONFIG_FILE ]]; then
  echo "Configuration file not found: $CONFIG_FILE" >&2
  usage
  exit 1
fi

# Read backups from specified section
read_backups() {
    section=$1
    awk -v section="$section" -F= \
      '$1 == "[" section "]" {f=1; next} /^\[.*\]/ {f=0} f && !/^#/ {print $1}' \
    "$CONFIG_FILE"
}

# Get value for specified backup name under specified section
get_backup_value() {
    section=$1
    backup=$2
    value=$(awk -v section="$section" -v backup="$backup" -F= \
      '$1 == "[" section "]" {f=1; next} /^\[.*\]/ {f=0} f && $1 == backup {print $2}' \
      "$CONFIG_FILE")
    echo "$value"
}

# Loop over backups in a  specified retention policy section and execute a backup
for backup in $(read_backups "$RETENTION"); do
    value=$(get_backup_value "$RETENTION" "$backup")
    if [ "$value" == "mail" ]; then
        mail_flag="--send-mail"
    else
        mail_flag=""
    fi

    files-backup --retention "$FREQUENCY" $mail_flag "$backup" \
            || echo "Error: files-backup command failed for $backup"
done
